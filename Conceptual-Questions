Question 1:
Promises help handle tasks like fetching data from a server or reading files without blocking other code. 
They make asynchronous code easier to read and maintain. With promises, we can chain multiple tasks together
and handle errors better.
Promises make code easier to read and manage. They handle errors more effectively with .catch. 
We can chain multiple tasks with .then. Features like Promise.all and Promise.race handle multiple tasks simultaneously. 
Promises help avoid callback hell, which occurs with deeply nested callbacks.


Question 2:
A closure in JavaScript is a combination of a function and the lexical environment within which that 
function was declared. It allows the function to access variables from its surrounding scope even after the outer 
function has finished executing. 
Example:

function outerFunction() {
  let outerVar = "I am outside!";
  function innerFunction() {
    console.log(outerVar); 
  }
  return innerFunction;
}
const myClosure = outerFunction();
myClosure();

Output: 'I am outside!'


Question 3:
A callback function in JavaScript is a function passed as an argument to another function and is executed after
the completion of some operation. It's used in asynchronous programming to handle events, timers, AJAX requests, 
and more. 
Example:

function fetchData(callback) {
  setTimeout(() => {
    const data = "Data fetched!";
    callback(data); 
  }, 2000);
}
fetchData((data) => {
  console.log(data); 
});

Output: 'Data fetched!'


Question 4:
async/await is a feature in JavaScript that makes writing asynchronous code more readable and easier to understand. 
async defines a function that returns a promise, and await pauses the execution of the function until the promise 
is resolved. They improve asynchronous programming by making it look more like synchronous code, simplifying error
handling, and allowing better code organization. 
Example:

async function getData() {
  try {
    const response = await fetch('https://api.example.com/data');
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error('Error fetching data:', error);
  }
}


Question 5:
JavaScript is the programming language used for web development. 
ES6 (ECMAScript 6) is a version of JavaScript, which is a specification that defines the language's syntax and behavior. 
ES6 introduced new features and enhancements to JavaScript, making it more powerful and expressive.

Question 6:
Some major features introduced in ES6 include arrow functions, template literals, classes, destructuring assignment, 
default parameters, rest and spread operators, promises, let and const for variable declarations, and modules for 
code organization. These features improve code readability, maintainability, and developer productivity.